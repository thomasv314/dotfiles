#!/usr/bin/env ruby
require 'open3'
require 'json'
require 'yaml'
require 'optparse'

USAGE = <<-EOF
Usage: secrets [options]

For help run:
  $ secrets -h

EOF

class SecretManager
  GITIGNORE = '.gitignore'
  SECRETS = 'secrets.yaml'

  private

  def secrets
    return @secrets if defined?(@secrets)
    out, err, status = Open3.capture3("sops -d #{SECRETS}")
    unless status.success?
      puts "Error decrypting secrets: \n#{err}"
      exit 1
    end
    @secrets = YAML.load(out)['secrets']
  end
end

class Decrypter < SecretManager
  def run!
    secrets.each do |fn, content|
      write_secret(fn, content) && ensure_gitignored(fn)
    end
  end

  private

  def write_secret(fname, content)
    File.open(fname, 'w') { |f| f.puts(content) }
    puts "Wrote #{fname}"
    true
  rescue => e
    puts "Error writing secret: #{fname}"
    raise e
  end

  def ensure_gitignored(fname)
    if File.read(GITIGNORE) =~ /#{fname}/
      puts "#{GITIGNORE} contains #{fname}"
      true
    else
      File.open(GITIGNORE, 'a') { |f| f.puts(fname) }
      puts "#{GITIGNORE} now contains #{fname}"
      true
    end
  end
end

class Encrypter < SecretManager
  def run!
    out, err, status = encrypt
  end

  def encrypt
    opts = { stdin_data: secrets_hash.to_yaml }
    out, err, status =
      Open3.capture3("sops -e /dev/stdin --input-type yaml --output-type yaml", stdin_data: secrets_hash.to_yaml)

    puts "Error encrypting secrets." and exit 1 unless status.success?

    File.open(SECRETS, 'w') { |f| f.puts JSON.parse(out).to_yaml }
    puts "Updated #{SECRETS}"
  end

  def secrets_hash
    @secrets_hash ||=
      { 'secrets' => secrets.keys.map { |fname| [fname, File.read(fname)] }.to_h }
  end
end


options = {}
OptionParser.new do |opts|
  opts.banner = USAGE
  opts.on("-d", "--decrypt", "Decrypt secrets") do |v|
    options[:action] = :decrypt
  end

  opts.on("-e", "--encrypt", "Encrypt secrets") do |v|
    options[:action] = :encrypt
  end
end.parse!

if options[:action] == :decrypt
  Decrypter.new.run!
elsif options[:action] == :encrypt
  Encrypter.new.run!
else
  puts USAGE
end

